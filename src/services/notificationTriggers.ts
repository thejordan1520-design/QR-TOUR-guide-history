import { supabase } from '../lib/supabase';

// Interfaces para notificaciones
export interface ReservationNotificationData {
  id: string;
  user_name: string;
  user_email: string;
  excursion_name: string;
  date: string;
  time: string;
  participants: number;
}

export interface ReservationUpdateData {
  id: string;
  user_name: string;
  user_email: string;
  excursion_name: string;
  status: string;
  admin_notes?: string;
}

// Servicio de triggers de notificaciones
class NotificationTriggersService {
  
  // Crear notificaci√≥n en la base de datos
  private async createNotification(notificationData: {
    title: string;
    message: string;
    type: string;
    target_audience: string;
    metadata?: any;
  }) {
    try {
      const { data, error } = await supabase
        .from('notifications')
        .insert([{
          ...notificationData,
          status: 'sent',
          sent_at: new Date().toISOString(),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creando notificaci√≥n en BD:', error);
        return null;
      }

      console.log('‚úÖ Notificaci√≥n creada en BD:', data);
      return data;
    } catch (err) {
      console.error('‚ùå Error cr√≠tico creando notificaci√≥n en BD:', err);
      return null;
    }
  }

  // Trigger cuando se crea una nueva reservaci√≥n
  async onReservationCreated(data: ReservationNotificationData) {
    try {
      console.log('üîî Trigger: Nueva reservaci√≥n creada:', data);

      // Crear notificaci√≥n para admin
      const adminNotification = await this.createNotification({
        title: 'Nueva Reservaci√≥n de Excursi√≥n',
        message: `${data.user_name} ha reservado "${data.excursion_name}" para ${data.date} a las ${data.time}. Participantes: ${data.participants}`,
        type: 'info',
        target_audience: 'admin',
        metadata: {
          reservation_id: data.id,
          user_email: data.user_email,
          excursion_name: data.excursion_name,
          date: data.date,
          time: data.time,
          participants: data.participants
        }
      });

      // Email de confirmaci√≥n al usuario (sin bloquear el flujo)
      setTimeout(async () => {
        try {
          console.log('üìß Preparando email de confirmaci√≥n para:', data.user_email);
          // TODO: Implementar env√≠o de email cuando el servicio est√© listo
          console.log('‚úÖ Email de confirmaci√≥n programado para env√≠o');
        } catch (emailError) {
          console.error('‚ö†Ô∏è Error programando email de confirmaci√≥n (no cr√≠tico):', emailError);
        }
      }, 100);

      // Email de notificaci√≥n al admin (sin bloquear el flujo)
      setTimeout(async () => {
        try {
          console.log('üìß Preparando notificaci√≥n para admin');
          // TODO: Implementar env√≠o de email cuando el servicio est√© listo
          console.log('‚úÖ Notificaci√≥n para admin programada');
        } catch (emailError) {
          console.error('‚ö†Ô∏è Error programando notificaci√≥n para admin (no cr√≠tico):', emailError);
        }
      }, 200);

      return adminNotification;
    } catch (error) {
      console.error('‚ùå Error en trigger onReservationCreated:', error);
      return null;
    }
  }

  // Trigger cuando se actualiza una reservaci√≥n
  async onReservationUpdated(data: ReservationUpdateData) {
    try {
      console.log('üîî Trigger: Reservaci√≥n actualizada:', data);

      // Crear notificaci√≥n para admin
      const adminNotification = await this.createNotification({
        title: `Reservaci√≥n ${data.status}`,
        message: `La reservaci√≥n de ${data.user_name} para "${data.excursion_name}" ha sido ${data.status}. ${data.admin_notes ? 'Notas: ' + data.admin_notes : ''}`,
        type: data.status === 'confirmed' ? 'success' : data.status === 'cancelled' ? 'warning' : 'info',
        target_audience: 'admin',
        metadata: {
          reservation_id: data.id,
          user_email: data.user_email,
          excursion_name: data.excursion_name,
          status: data.status,
          admin_notes: data.admin_notes
        }
      });

      // Enviar email al usuario sobre el cambio de estado
      try {
        let emailSubject = '';
        let emailMessage = '';

        switch (data.status) {
          case 'confirmed':
            emailSubject = 'Reservaci√≥n Confirmada - QR Tour Guide';
            emailMessage = `Hola ${data.user_name},

¬°Excelente noticia! Tu reservaci√≥n para "${data.excursion_name}" ha sido confirmada.

${data.admin_notes ? `Notas adicionales: ${data.admin_notes}` : ''}

¬°Esperamos verte pronto!

Saludos,
Equipo QR Tour Guide`;
            break;
          case 'cancelled':
            emailSubject = 'Reservaci√≥n Cancelada - QR Tour Guide';
            emailMessage = `Hola ${data.user_name},

Lamentamos informarte que tu reservaci√≥n para "${data.excursion_name}" ha sido cancelada.

${data.admin_notes ? `Raz√≥n: ${data.admin_notes}` : ''}

Si tienes alguna pregunta, no dudes en contactarnos.

Saludos,
Equipo QR Tour Guide`;
            break;
          default:
            emailSubject = 'Actualizaci√≥n de Reservaci√≥n - QR Tour Guide';
            emailMessage = `Hola ${data.user_name},

Tu reservaci√≥n para "${data.excursion_name}" ha sido actualizada.

Estado actual: ${data.status}
${data.admin_notes ? `Notas: ${data.admin_notes}` : ''}

Saludos,
Equipo QR Tour Guide`;
        }

        // TODO: Implementar env√≠o de email cuando el servicio est√© listo
        console.log('üìß Email de actualizaci√≥n programado para:', data.user_email);
        console.log('‚úÖ Email de actualizaci√≥n programado');
      } catch (emailError) {
        console.error('‚ö†Ô∏è Error enviando email de actualizaci√≥n (no cr√≠tico):', emailError);
      }

      return adminNotification;
    } catch (error) {
      console.error('‚ùå Error en trigger onReservationUpdated:', error);
      return null;
    }
  }

  // Trigger para notificaciones generales del sistema
  async onSystemNotification(data: {
    title: string;
    message: string;
    type: 'info' | 'warning' | 'error' | 'success';
    target_audience: 'all' | 'admin' | 'users';
    metadata?: any;
  }) {
    try {
      console.log('üîî Trigger: Notificaci√≥n del sistema:', data);

      const notification = await this.createNotification({
        title: data.title,
        message: data.message,
        type: data.type,
        target_audience: data.target_audience,
        metadata: data.metadata
      });

      return notification;
    } catch (error) {
      console.error('‚ùå Error en trigger onSystemNotification:', error);
      return null;
    }
  }
}

// Exportar instancia √∫nica
const notificationTriggers = new NotificationTriggersService();
export default notificationTriggers;